{"version":3,"sources":["types/postTypes.js","config/index.js","actions/postActions.js","components/PostsIndex/index.js","history.js","components/PostsNew/index.js","components/PostsShow/index.js","routes.js","reducers/postReducers.js","reducers/index.js","store.js","components/App.js","index.js"],"names":["POST_TYPES","FETCH_POSTS","CREATE_POST","require","config","isDevelop","process","ENVIRONMENT","DEVELOP","REDUXBLOG_API_BASE_URL","REDUXBLOG_API_KEY","fetchPosts","request","axios","get","type","payload","createPost","properties","post","PostsIndex","renderPosts","props","posts","map","className","to","id","categories","title","this","Component","connect","state","all","dispatch","bindActionCreators","postActions","history","createBrowserHistory","PostsNew","then","push","renderInput","input","name","label","meta","touched","error","placeholder","handleSubmit","invalid","onSubmit","bind","Field","component","disabled","reduxForm","form","validate","values","errors","content","PostsShow","match","params","Routes","path","exact","INITIAL_STATE","postReducers","action","data","rootReducer","combineReducers","formReducer","store","applyMiddleware","promise","createStore","createStoreWithMiddleware","reducers","window","__REDUX_DEVTOOLS_EXTENSION__","App","children","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.62e025de.chunk.js","sourcesContent":["const POST_TYPES = {\n    FETCH_POSTS: 'FETCH_POSTS',\n    CREATE_POST: 'CREATE_POST'\n}\n\nexport default POST_TYPES;","require('dotenv').config();\n\nconst isDevelop = process.env.ENVIRONMENT === 'develop';\nconst config = {\n    ENVIRONMENT: process.env.ENVIRONMENT,\n    DEVELOP: isDevelop,\n    REDUXBLOG_API_BASE_URL: process.env.REACT_APP_REDUXBLOG_API_BASE_URL,\n    REDUXBLOG_API_KEY: process.env.REACT_APP_REDUXBLOG_API_KEY\n};\n\nexport default config;","import axios from 'axios';\nimport { POST_TYPES } from '../types';\nimport config from '../config';\n\nconst fetchPosts = () => {\n    const request = axios.get(`${config.REDUXBLOG_API_BASE_URL}/api/posts?key=${config.REDUXBLOG_API_KEY}`);\n\n    return {\n        type: POST_TYPES.FETCH_POSTS,\n        payload: request\n    };\n};\n\nconst createPost = (properties) => {\n    const request = axios.post(`${config.REDUXBLOG_API_BASE_URL}/api/posts?key=${config.REDUXBLOG_API_KEY}`, properties);\n\n    return {\n        type: POST_TYPES.CREATE_POST,\n        payload: request\n    }\n}\n\nexport default {\n    fetchPosts,\n    createPost\n}","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Link } from \"react-router-dom\";\nimport { postActions } from \"../../actions\";\nclass PostsIndex extends Component {\n  componentWillMount() {\n    this.props.fetchPosts();\n  }\n  renderPosts = () =>\n    this.props.posts &&\n    this.props.posts.map((post) => (\n      <div className=\"item\" key={post.id}>\n        <div className=\"content\">\n          <div className=\"ui one column grid\">\n            <div className=\"row\">\n              <div className=\"sixteen wide column\">\n                <Link to={`posts/${post.id}`}>\n                  <span className=\"ui right floated\">{post.categories}</span>\n                  <div className=\"header\">{post.title}</div>\n                </Link>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"description\"></div>\n        </div>\n      </div>\n    ));\n  render() {\n    return (\n      <div>\n        <div className=\"ui one column grid\">\n          <div className=\"row\">\n            <div className=\"sixteen wide column\">\n              <Link to=\"/posts/new\" className=\"ui right floated primary button\">\n                Add a Post\n              </Link>\n            </div>\n          </div>\n        </div>\n        <h3>Posts</h3>\n        <div className=\"ui relaxed divided list\">{this.renderPosts()}</div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    posts: state.posts.all,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ fetchPosts: postActions.fetchPosts }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostsIndex);\n","import { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\nexport default history;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Link } from 'react-router-dom';\nimport { postActions } from '../../actions';\nimport history from '../../history';\n\nclass PostsNew extends Component {\n  onSubmit(props) {\n    this.props.createPost(props).then(() => {\n      // blog post has been created, navigate the user to the index\n      // We nagigate by calling this.context.router.push with the\n      // new path to navigate to.\n      history.push('/');\n    });\n  }\n  render() {\n    const renderInput = ({ input, name, label, type, meta: { touched, error } }) => (\n      <div className={`field  ${touched && error ? 'error' : ''}`}>\n        <label>{label}</label>\n        <div>\n          <input {...input} placeholder={label} type={type} name={name} />\n          {touched && error && <div className=\"ui red message\">{error}</div>}\n        </div>\n      </div>\n    );\n\n    const renderTextArea = ({ input, name, label, meta: { touched, error } }) => (\n      <div className={`field  ${touched && error ? 'error' : ''}`}>\n        <label>{label}</label>\n        <div>\n          <textarea {...input} placeholder={label} name={name}></textarea>\n          {touched && error && <div className=\"ui red message\">{error}</div>}\n        </div>\n      </div>\n    );\n    const {\n      handleSubmit,\n      invalid\n    } = this.props;\n    return (\n      <form className=\"ui form\" onSubmit={handleSubmit(this.onSubmit.bind(this))}>\n        <h3>Create a New Post</h3>\n        <Field name=\"title\" label=\"Title\" component={renderInput} type=\"text\" />\n\n        <Field name=\"categories\" label=\"Categories\" component={renderInput} type=\"text\" />\n\n        <Field name=\"content\" component={renderTextArea} label=\"Content\" />\n        <button type=\"submit\" className=\"ui primary button\" disabled={invalid}>\n          Submit\n        </button>\n        <Link to=\"/\" className=\"ui negative button\">\n          Cancel\n        </Link>\n      </form>\n    );\n  }\n}\n\nfunction validate(values) {\n  const errors = {};\n\n  if (!values.title) {\n    errors.title = 'Enter a title';\n  }\n\n  if (!values.categories) {\n    errors.categories = 'Enter a categories';\n  }\n\n  if (!values.content) {\n    errors.content = 'Enter some content';\n  }\n\n  return errors;\n};\n\n// connect: First argument is mapStateToProps, 2nd is mapDispatchToProps\n// reduxForm: 1st is form config, 2nd is mapStateToProps, 3rd is mapDispatchToProps\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators({ createPost: postActions.createPost }, dispatch)\n};\nexport default reduxForm({\n  form: \"PostsNewForm\",\n  validate\n})(connect(null, mapDispatchToProps)(PostsNew));\n","import React, { Component } from \"react\";\n\nclass PostsShow extends Component {\n  render() {\n    return <div>Show post {this.props.match.params.id}</div>;\n  }\n}\n\nexport default PostsShow;\n","import { Router, Route } from \"react-router-dom\";\nimport PostsIndex from \"./components/PostsIndex\";\nimport PostsNew from \"./components/PostsNew\";\nimport PostsShow from \"./components/PostsShow\";\nimport history from \"./history\";\n\nconst Routes = () => (\n  <Router history={history}>\n    <Route path=\"/\" component={PostsIndex} exact />\n    <Route path=\"/posts/new\" component={PostsNew} exact />\n    <Route path=\"/posts/:id\" component={PostsShow} />\n  </Router>\n);\n\nexport default Routes;\n","import { POST_TYPES } from \"../types\";\nconst INITIAL_STATE = {\n  all: [],\n  post: null,\n};\n\nconst postReducers = function (state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case POST_TYPES.FETCH_POSTS:\n      return {\n        ...state,\n        all: action.payload.data,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default postReducers;\n","import { combineReducers } from \"redux\";\nimport { reducer as formReducer } from 'redux-form';\nimport postReducers from \"./postReducers\";\nconst rootReducer = combineReducers({\n  posts: postReducers,\n  form: formReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport promise from 'redux-promise';\nimport reducers from './reducers';\n\nconst createStoreWithMiddleware = applyMiddleware(promise)(createStore);\n\nconst store = createStoreWithMiddleware(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;","import React, { Component } from 'react';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"ui container\">\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport Routes from './routes';\nimport store from \"./store\";\n\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <Provider store={store}>\n      <App>\n        <Routes />\n      </App>\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}