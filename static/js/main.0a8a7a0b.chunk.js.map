{"version":3,"sources":["types/postTypes.js","config/index.js","actions/postActions.js","components/PostsIndex/index.js","components/PostsNew/index.js","routes.js","reducers/postReducers.js","reducers/index.js","store.js","components/App.js","index.js"],"names":["POST_TYPES","FETCH_POSTS","CREATE_POST","require","config","isDevelop","process","ENVIRONMENT","DEVELOP","REDUXBLOG_API_BASE_URL","REDUXBLOG_API_KEY","fetchPosts","request","axios","get","type","payload","createPost","properties","post","PostsIndex","this","props","className","to","Component","connect","dispatch","bindActionCreators","postActions","PostsNew","renderInput","input","name","label","meta","touched","error","placeholder","handleSubmit","invalid","onSubmit","Field","component","disabled","reduxForm","form","validate","values","errors","title","categories","content","history","createBrowserHistory","Routes","path","exact","INITIAL_STATE","all","postReducers","state","action","data","rootReducer","combineReducers","posts","formReducer","store","applyMiddleware","promise","createStore","createStoreWithMiddleware","reducers","window","__REDUX_DEVTOOLS_EXTENSION__","App","children","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.0a8a7a0b.chunk.js","sourcesContent":["const POST_TYPES = {\n    FETCH_POSTS: 'FETCH_POSTS',\n    CREATE_POST: 'CREATE_POST'\n}\n\nexport default POST_TYPES;","require('dotenv').config();\n\nconst isDevelop = process.env.ENVIRONMENT === 'develop';\nconst config = {\n    ENVIRONMENT: process.env.ENVIRONMENT,\n    DEVELOP: isDevelop,\n    REDUXBLOG_API_BASE_URL: process.env.REACT_APP_REDUXBLOG_API_BASE_URL,\n    REDUXBLOG_API_KEY: process.env.REACT_APP_REDUXBLOG_API_KEY\n};\n\nexport default config;","import axios from 'axios';\nimport { POST_TYPES } from '../types';\nimport config from '../config';\n\nconst fetchPosts = () => {\n    const request = axios.get(`${config.REDUXBLOG_API_BASE_URL}/api/posts?key=${config.REDUXBLOG_API_KEY}`);\n\n    return {\n        type: POST_TYPES.FETCH_POSTS,\n        payload: request\n    };\n};\n\nconst createPost = (properties) => {\n    const request = axios.post(`${config.REDUXBLOG_API_BASE_URL}/api/posts?key=${config.REDUXBLOG_API_KEY}`, properties);\n\n    return {\n        type: POST_TYPES.CREATE_POST,\n        payload: request\n    }\n}\n\nexport default {\n    fetchPosts,\n    createPost\n}","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Link } from 'react-router-dom';\nimport { postActions } from \"../../actions\";\nclass PostsIndex extends Component {\n  componentWillMount() {\n    this.props.fetchPosts();\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"ui one column grid\">\n          <div className=\"row\">\n            <div className=\"sixteen wide column\">\n              <Link to=\"/posts/new\" className=\"ui right floated primary button\">\n                  Add a Post\n              </Link>\n            </div>\n          </div>\n        </div>\n        List of blog posts.\n      </div>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ fetchPosts: postActions.fetchPosts }, dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(PostsIndex);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Link } from 'react-router-dom';\nimport { postActions } from '../../actions';\n\nclass PostsNew extends Component {\n  render() {\n    const renderInput = ({ input, name, label, type, meta: { touched, error } }) => (\n      <div className={`field  ${touched && error ? 'error' : ''}`}>\n        <label>{label}</label>\n        <div>\n          <input {...input} placeholder={label} type={type} name={name} />\n          {touched && error && <div className=\"ui red message\">{error}</div>}\n        </div>\n      </div>\n    );\n\n    const renderTextArea = ({ input, name, label, meta: { touched, error } }) => (\n      <div className={`field  ${touched && error ? 'error' : ''}`}>\n        <label>{label}</label>\n        <div>\n          <textarea {...input} placeholder={label} name={name}></textarea>\n          {touched && error && <div className=\"ui red message\">{error}</div>}\n        </div>\n      </div>\n    );\n    const {\n      handleSubmit,\n      invalid\n    } = this.props;\n    return (\n      <form className=\"ui form\" onSubmit={() => handleSubmit(this.props.createPost)}>\n        <h3>Create a New Post</h3>\n        <Field name=\"title\" label=\"Title\" component={renderInput} type=\"text\" />\n\n        <Field name=\"categories\" label=\"Categories\" component={renderInput} type=\"text\" />\n        \n        <Field name=\"content\" component={renderTextArea} label=\"Content\" />\n        <button type=\"submit\" className=\"ui primary button\" disabled={invalid}>\n          Submit\n        </button>\n        <Link to=\"/\" className=\"ui negative button\">\n          Cancel\n        </Link>\n      </form>\n    );\n  }\n}\n\nfunction validate (values) {\n  const errors = {};\n\n  if(!values.title) {\n    errors.title = 'Enter a title';\n  }\n\n  if(!values.categories) {\n    errors.categories = 'Enter a categories';\n  }\n\n  if(!values.content) {\n    errors.content = 'Enter some content';\n  }\n\n  return errors;\n};\n\n// connect: First argument is mapStateToProps, 2nd is mapDispatchToProps\n// reduxForm: 1st is form config, 2nd is mapStateToProps, 3rd is mapDispatchToProps\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators({ createPost: postActions.createPost }, dispatch)\n};\nexport default reduxForm({\n  form: \"PostsNewForm\",\n  validate\n})(connect(null, mapDispatchToProps)(PostsNew));\n","import { Router, Route } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport PostsIndex from './components/PostsIndex';\nimport PostsNew from './components/PostsNew';\nconst history = createBrowserHistory();\n\nconst Routes = () => (\n  <Router history={history}>\n    <Route path=\"/\" component={PostsIndex} exact />\n    <Route path=\"/posts/new\" component={PostsNew} exact />\n  </Router>\n);\n\nexport default Routes;\n","import { POST_TYPES } from \"../types\";\nconst INITIAL_STATE = {\n  all: [],\n  post: null,\n};\n\nconst postReducers = function (state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case POST_TYPES.FETCH_POSTS:\n      return {\n        ...state,\n        all: action.payload.data,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default postReducers;\n","import { combineReducers } from \"redux\";\nimport { reducer as formReducer } from 'redux-form';\nimport postReducers from \"./postReducers\";\nconst rootReducer = combineReducers({\n  posts: postReducers,\n  form: formReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport promise from 'redux-promise';\nimport reducers from './reducers';\n\nconst createStoreWithMiddleware = applyMiddleware(promise)(createStore);\n\nconst store = createStoreWithMiddleware(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;","import React, { Component } from 'react';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"ui container\">\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport Routes from './routes';\nimport store from \"./store\";\n\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <Provider store={store}>\n      <App>\n        <Routes />\n      </App>\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}